draw_shape(window,  shape,   centre_offset=Vec2(0.0,0.0),   scaling=1.0, angle=0.0)

Add *translation* (which is just vector addition) and to give "draw_shape" a centre_offset paramete r- and use this to replace the red square with the triangle an intro to parameterised transformation
then add an angle parameter and translate the formulas for making a rotation matrix, and transforming a point by a rotation matrix - then you have "rotating spaceship" "parameterized transformation" it just means you get the parameters passed into "draw_shape" all transformation is controlled by parameters "transformation": = translation (offsets, like movement).   Rotation (like something rolling, or a car turning, specifically in asteroids look at the spaceshif turning left and right). 
Scaling (getting larger or smaller like a baloon inflating deflating. "draw a triangle 3x in size " or "draw a triangle 10% of the original size" the rotation is done by rotation matrix

Break it down into pieces keep it ORGANISED with GOOD names that are actually in syuc with what you want the program to do, that helps you think so you've got a single goal - "make the spacceship move and rotate". you break that down into several steps (the first of which was writing "draw_shape") i can't even count how many steps there are, but you can keep it in your head or write it down any gradually break each step down 
"task - make the spaceship a moving rotating triangle"
"subtask" make a function to draw a transformed triangle"
[2] -call it for the spaceship, give it the spaceships paramters
[1.1] "shape = plain vertices   
[1.2]shape= translated vertices 
[1.3] shape= rotated vertices
Subtasks of [1.3]:
[1.3] write Matrix * Vector transformation
[1.4] write code to make a rotation matrix from an angle
[1.5] wire that up inside the draw_shape
[1.6] add rotation control for the player
